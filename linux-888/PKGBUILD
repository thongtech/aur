pkgbase="linux-888"
_major=6.14
_minor=2
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
_srcname=linux-${_stable}
pkgdesc='An optimised kernel based on linux-cachyos-bore-lto'
pkgrel=1
arch=('x86_64')
url='https://github.com/archlinux/linux'
license=('GPL-2.0-only')
options=('!strip' '!debug' '!lto')
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
  zstd
  clang
  llvm
  lld
)

_cfgsource="https://raw.githubusercontent.com/CachyOS/linux-cachyos/master"
_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
source=(
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "${_cfgsource}/linux-cachyos-bore/config"
    "${_cfgsource}/linux-cachyos-bore/auto-cpu-optimization.sh"
    "${_patchsource}/all/0001-cachyos-base-all.patch"
    "${_patchsource}/sched/0001-bore-cachy.patch"
    "${_patchsource}/misc/dkms-clang.patch"
    "Add-14-USB-device-IDs-for-Qualcomm-WCN785x.patch")

BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER="$pkgbase"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  # modprobed.db path
  MODPROBED_DB="$HOME/.config/modprobed.db"

  git clone --depth 1 --branch ath-next https://git.kernel.org/pub/scm/linux/kernel/git/ath/ath.git
  cd "$_srcname"

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  echo "Applying ath driver from ath-next..."
  rm -rf "${srcdir}/${_srcname}/Documentation/devicetree/bindings/net/wireless"
  rm -rf "${srcdir}/${_srcname}/drivers/net/wireless/ath"
  cp -r "${srcdir}/ath/Documentation/devicetree/bindings/net/wireless" "${srcdir}/${_srcname}/Documentation/devicetree/bindings/net/"
  cp -r "${srcdir}/ath/drivers/net/wireless/ath" "${srcdir}/${_srcname}/drivers/net/wireless/"

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config

  # Must use modprobed.db
  if [ -e "$MODPROBED_DB" ]; then
    yes "" | make "${BUILD_FLAGS[@]}" LSMOD="$MODPROBED_DB" localmodconfig > debug_localmodconfig.log 2>&1
  else
    echo "No modprobed.db data found" >&2
    return 1
  fi

  ################################ HELPER FUNCTIONS ###############################
  ###                                                                           ###
  ###                      These are helper functions for                       ###
  ###                     kernel configuration management                       ###
  ###           Please scroll down to "Kernel Configuration" section            ###
  ###                                                                           ###
  #################################################################################

  # Variables
  local kconfig_file
  declare -A config_changes

  # Logging helper
  log_operation() {
    local prefix="$1"
    local message="$2"
    echo "$prefix $message" >> debug_kernel_cfg.log
  }

  # Get current config value
  get_config_value() {
    local option="$1"
    if grep -q "^CONFIG_${option}=y$" .config; then
      echo "y"
    elif grep -q "^CONFIG_${option}=m$" .config; then
      echo "m"
    elif grep -q "^# CONFIG_${option} is not set$" .config; then
      echo "n"
    elif grep -q "^CONFIG_${option}=" .config; then
      grep "^CONFIG_${option}=" .config | cut -d'=' -f2- | sed 's/^"\(.*\)"$/\1/'
    fi
  }

  # Core config modification function
  config_option() {
    local operation="$1"
    local option="$2"
    local value="$3"
    local record="${4:-true}"
    
    local current_value=$(get_config_value "$option")
    local target_value
    
    case "$operation" in
      e) target_value="y" ;;
      m) target_value="m" ;;
      d) target_value="n" ;;
      set-val|set-string) target_value="$value" ;;
      *) echo "Invalid operation: $operation" >&2; return 1 ;;
    esac
    
    [[ "$current_value" == "$target_value" ]] && {
      log_operation "==" "${option} already set to ${target_value}"
      return 0
    }
    
    local prefix
    case "$operation" in
      e) prefix="++" ;;
      m) prefix="+" ;;
      d) prefix="-" ;;
      *) prefix="=" ;;
    esac
    
    log_operation "$prefix" "${option} (${current_value} -> ${target_value})"
    case "$operation" in
      e|m|d) scripts/config -"$operation" "$option" ;;
      *) scripts/config --"$operation" "$option" "$value" ;;
    esac
    [[ "$record" == "true" ]] && config_changes["$option"]="${value:-$target_value}"
    
    return 0
  }

  # Pattern-based config operations
  copy_config_pattern() {
    local pattern="$1"
    local count=0
    
    log_operation "~~~" "Copying pattern: $pattern from original config"
    
    while IFS= read -r line; do
      if [[ $line =~ ^CONFIG_${pattern}= ]]; then
        local key="${line%%=*}" value="${line#*=}"
        key="${key#CONFIG_}" value="${value//\"/}"
        
        case "$value" in
          y) config_option e "$key" "" false ;;
          m) config_option m "$key" "" false ;;
          *) config_option set-val "$key" "$value" false ;;
        esac
        ((count++)) || true
      elif [[ $line =~ ^#\ CONFIG_${pattern}\ is\ not\ set ]]; then
        config_option d "${line#\# CONFIG_}" "" false
        ((count++)) || true
      fi
    done < "../config"
    
    log_operation "=" "$([[ $count -eq 0 ]] && echo "Error: No options matched pattern '$pattern'" || echo "Successfully copied $count options")"
  }

  # Disable configs matching pattern
  disable_config_pattern() {
    local pattern="$1"
    local count=0
    
    log_operation "~~~" "Disabling pattern: $pattern"
    
    while read -r line; do
      local key="${line%%=*}"
      key="${key#CONFIG_}"
      config_option d "$key" "" false
      ((count++)) || true
    done < <(grep -P "^CONFIG_$pattern=[ym]" .config)
    
    log_operation "=" "$([[ $count -eq 0 ]] && echo "Error: No options matched pattern '$pattern'" || echo "Successfully disabled $count options")"
  }

  # Enable configs matching pattern
  enable_config_pattern() {
    local pattern="$1" value="$2" count=0
    
    [[ ! "$value" =~ ^[em]$ ]] && { echo "Error: value must be either 'e' or 'm'" >&2; return 1; }
    
    log_operation "~~~" "Enabling pattern: $pattern with value $value"
    
    local search_value=$([[ $value == "e" ]] && echo "m" || echo "y")
    local regex="^(# CONFIG_${pattern} is not set|CONFIG_${pattern}=${search_value}$)"
    
    while read -r line; do
      if [[ $line =~ ^#\ CONFIG_(.*)\ is\ not\ set ]]; then
        config_option "$value" "${BASH_REMATCH[1]}"
      elif [[ $line =~ ^CONFIG_(.*)=${search_value}$ ]]; then
        config_option "$value" "${BASH_REMATCH[1]}"
      fi
      ((count++)) || true
    done < <(grep -P "$regex" .config)
    
    log_operation "=" "$([[ $count -eq 0 ]] && echo "Error: No options matched pattern '$pattern'" || echo "Successfully enabled $count options")"
  }

  ############################# HELPER FUNCTIONS: END #############################

  # Some configs are missed by localmodconfig
  echo "Copying specific configurations from original config..."
  copy_config_pattern ".*(INTEL|AMD).*"
  copy_config_pattern "CRYPTO.*"
  copy_config_pattern "SND_(HDA|SOC).*"

  # Native CPU optimisation
  chmod +x "${srcdir}"/auto-cpu-optimization.sh
  "${srcdir}"/auto-cpu-optimization.sh

  # CachyOS configs
  config_option e CACHY

  config_option e SCHED_BORE

  config_option e LTO_CLANG_FULL

  config_option d HZ_300
  config_option e HZ_1000
  config_option set-val HZ "1000"

  config_option d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  config_option e CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  config_option d HZ_PERIODIC
  config_option d NO_HZ_IDLE
  enable_config_pattern "NO_HZ(_(FULL|COMMON))?" e
  config_option e CONTEXT_TRACKING

  config_option e PREEMPT_DYNAMIC
  config_option e PREEMPT
  disable_config_pattern "PREEMPT_(VOLUNTARY|LAZY|NONE)"

  config_option d CC_OPTIMIZE_FOR_PERFORMANCE
  config_option e CC_OPTIMIZE_FOR_PERFORMANCE_O3

  config_option d TRANSPARENT_HUGEPAGE_MADVISE
  config_option e TRANSPARENT_HUGEPAGE_ALWAYS

  config_option e USER_NS

  # TCP BBRv3
  disable_config_pattern "TCP_CONG_.*"
  disable_config_pattern "NET_SCH_.*"
  enable_config_pattern "TCP_CONG_(ADVANCED|BBR)" e
  config_option e DEFAULT_BBR
  config_option e NET_SCH_DEFAULT
  enable_config_pattern "NET_SCH_(HTB|FQ_CODEL|FQ)" m
  config_option e NET_SCH_CAKE
  config_option d DEFAULT_FQ_CODEL
  config_option e DEFAULT_FQ

  # Expert options
  config_option e EXPERT
  config_option e PROCESSOR_SELECT
  
  ############################ KERNEL CONFIGURATION ##############################
  ###                                                                          ###
  ###                        Platform-Specific Settings                        ###
  ###                                                                          ###
  ###       These components are disabled by default but may be required       ###
  ###       depending on your hardware configuration. Please review and        ###
  ###       enable any necessary options for your system.                      ###
  ###                                                                          ###
  ################################################################################

  config_option d ACCESSIBILITY
  config_option d AGP
  config_option d ANDROID_BINDER_IPC
  config_option d ATA_SFF
  config_option d AUDIT
  config_option d BSD_DISKLABEL
  config_option d BTRFS_FS
  config_option d DCB
  config_option d EDAC
  config_option d FUNCTION_ERROR_INJECTION
  config_option d FUSION
  config_option d GOOGLE_FIRMWARE
  config_option d HAMRADIO
  config_option d HIBERNATION
  config_option d HTE
  config_option d HYPERVISOR_GUEST
  config_option d INTEL_TH
  config_option d INTERCONNECT
  config_option d ISDN
  config_option d KFENCE
  config_option d MACINTOSH_DRIVERS
  config_option d MCTP
  config_option d MEMORY_FAILURE
  config_option d MMIOTRACE
  config_option d MPLS
  config_option d MPTCP
  config_option d MTD
  config_option d PM_DEVFREQ
  config_option d PROC_KCORE
  config_option d PROFILING
  config_option d RC_CORE
  config_option d REMOTEPROC
  config_option d RUNTIME_TESTING_MENU
  config_option d SERIAL_NONSTANDARD
  config_option d SOC_TI
  config_option d STAGING
  config_option d TRACER_SNAPSHOT
  config_option d UPROBE_EVENTS
  config_option d USB_ACM
  config_option d VIRT_DRIVERS
  config_option d WATCHDOG
  config_option d ZSWAP

  ### Bulk disable configs
  disable_config_pattern "((NET|WLAN)_VENDOR.+|.+PHY)"
  disable_config_pattern "(?!FUNCTION).+_TRACER"
  disable_config_pattern "(AIX|MAC|MINIX|SOLARIS_X86|LDM|KARMA)_(SUB)?PARTITION"
  disable_config_pattern "(DEBUG_(BOOT_PARAMS|WX|SHIRQ)|KEXEC(_FILE)?)"
  disable_config_pattern "(PCSPKR|MEDIA|CHROME|MELLANOX|SURFACE|X86)_PLATFORM(S|_DRIVERS.*)?"
  disable_config_pattern ".*(HYPERV|XEN|VIRTIO|LWTUNNEL|RAID).*"
  disable_config_pattern ".*(STATS|QUOTA|DEBUG((_)?FS|_CORE)?|DUMP)"
  disable_config_pattern ".*APPLE(?!_MFI_FASTCHARGE).*"
  disable_config_pattern ".+(DUMMY|TRACING|TABLET|TEST)"
  disable_config_pattern ".+(HYGON|CENTAUR|ZHAOXIN)"
  disable_config_pattern "BT_(HCIBTUSB_(BCM|MTK|RTL)|INTEL_PCIE)"
  disable_config_pattern "HOTPLUG_PCI_(CPCI|SHPC)"
  disable_config_pattern "INPUT_(MOUSE|TOUCHSCREEN|JOY.+)"
  disable_config_pattern "IP(V6)?_(MROUTE|ADVANCED_ROUTER)"
  disable_config_pattern "MEDIA_((ANALOG|DIGITAL)_TV|RADIO|TEST)_SUPPORT"
  disable_config_pattern "NET(LABEL|KIT|_(NCSI|FC|SWITCHDEV|L3_MASTER_DEV))"
  disable_config_pattern "NETWORK_(FILESYSTEMS|PHY_TIMESTAMPING|SECMARK)"
  disable_config_pattern "NF_CT_PROTO_(DCCP|SCTP)"
  disable_config_pattern "SATA_(AHCI|ZPODD)"
  disable_config_pattern "SCSI_(LOWLEVEL|DH|LOGGING)"
  disable_config_pattern "SND_(SOC_(AC97_CODEC|IMG)|INTEL8X0.*|SST_ATOM.+)"
  disable_config_pattern "SECURITY_(SMACK|TOMOYO|LOADPIN|APPARMOR)"
  disable_config_pattern "VGA_(ARB|SWITCHEROO)"
  disable_config_pattern "ZRAM_BACKEND_(?!ZSTD).+"

  # CPU vendor dependent
  ## Intel
  if grep -q "GenuineIntel" /proc/cpuinfo; then
    # Strip all AMD components
    disable_config_pattern ".*AMD.*"
    disable_config_pattern "PINCTRL_(?!(TIGERLAKE|ALDERLAKE)).*"
    config_option e WLAN_VENDOR_INTEL
  else
    ## AMD
    # Several libs are shared with Intel
    disable_config_pattern "(?!(BT|CRYPTO|PERF|SND|SOUNDWIRE|X86)_).*INTEL.*"
    enable_config_pattern "INTEL_RAPL(_CORE)?" m
    disable_config_pattern "PINCTRL_(?!AMD).*"
    config_option e WLAN_VENDOR_ATH
  fi

  ########################### KERNEL CONFIGURATION: END ###########################

  # Fix Arch initcpios warnings
  config_option m THINKPAD_ACPI
  config_option m DM_INTEGRITY

  ### Rewrite configuration
  echo "Rewriting configuration..."
  yes "" | make "${BUILD_FLAGS[@]}" prepare > debug_prepare.log 2>&1
  yes "" | make "${BUILD_FLAGS[@]}" config > debug_config.log 2>&1
  echo "Config rewritten"

  ### Verify configuration
  verify_config() {
    local key="${1#CONFIG_}" expected="$2" actual_value
    
    # Skip special configs
    [[ "$key" =~ ^(ARCH|HAVE|WANT)_ ]] && return 0
    
    # Get actual value
    actual_value=$(get_config_value "$key")
    [[ -z "$actual_value" ]] && { 
      errors+=("Option CONFIG_$key was set to '$expected' but is missing")
      return 0
    }
    
    if [[ "$expected" == "n" && "$actual_value" != "n" ]]; then
      errors+=("Option CONFIG_$key was DISABLED but is set to '$actual_value'")
      return 0
    elif [[ "$actual_value" != "$expected" ]]; then
      errors+=("Option CONFIG_$key was set to '$expected' but is '$actual_value'")
      return 0
    fi
    
    return 0
  }

  echo "Verifying configuration..."
  local errors=()
  
  # Verify all stored changes
  for full_key in "${!config_changes[@]}"; do
    verify_config "$full_key" "${config_changes[$full_key]}"
  done

  # Report verification results
  if ((${#errors[@]} > 0)); then
    printf "Configuration verification failed!\nThe following options were not set as expected:\n"
    printf '%s\n' "${errors[@]}"
    echo "Please check your kernel configuration and dependencies."
    exit 1
  else
    echo "Configuration verification successful!"
  fi

  ### Prepared version
  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd "$_srcname"
  make "${BUILD_FLAGS[@]}" -j"$(nproc)" all 2> build-errors.log
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=('coreutils' 'kmod' 'initramfs')
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN NTSYNC-MODULE VHBA-MODULE ADIOS-MODULE)

  cd "$_srcname"

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
      DEPMOD=/doesnt/exist  modules_install  # Suppress depmod

  # remove build links
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=('pahole' "${pkgbase}")
  depends+=(clang llvm lld)

  cd "${_srcname}"
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
    install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
  fi

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase")
pkgname+=("$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

b2sums=('SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP')

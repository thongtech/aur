pkgbase="linux-888"
_major=6.14
_minor=2
pkgver=${_major}.${_minor}
_stable=${_major}.${_minor}
_srcname=linux-${_stable}
pkgdesc='A kernel based on linux-cachyos-bore-lto'
pkgrel=1
arch=('x86_64')
url='https://github.com/archlinux/linux'
license=('GPL-2.0-only')
options=('!strip' '!debug' '!lto')
makedepends=(
  bc
  cpio
  gettext
  libelf
  pahole
  perl
  python
  tar
  xz
  zstd
  clang
  llvm
  lld
)

_cfgsource="https://raw.githubusercontent.com/CachyOS/linux-cachyos/master"
_patchsource="https://raw.githubusercontent.com/cachyos/kernel-patches/master/${_major}"
source=(
    "https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/${_srcname}.tar.xz"
    "${_cfgsource}/linux-cachyos-bore/config"
    "${_cfgsource}/linux-cachyos-bore/auto-cpu-optimization.sh"
    "${_patchsource}/all/0001-cachyos-base-all.patch"
    "${_patchsource}/sched/0001-bore-cachy.patch"
    "${_patchsource}/misc/dkms-clang.patch"
    "Add-14-USB-device-IDs-for-Qualcomm-WCN785x.patch")

BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER="$pkgbase"
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  git clone --depth 1 --branch ath-next https://git.kernel.org/pub/scm/linux/kernel/git/ath/ath.git
  cd "$_srcname"

  echo "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  echo "Applying ath driver from ath-next..."
  rm -rf "${srcdir}/${_srcname}/Documentation/devicetree/bindings/net/wireless"
  rm -rf "${srcdir}/${_srcname}/drivers/net/wireless/ath"
  cp -r "${srcdir}/ath/Documentation/devicetree/bindings/net/wireless" "${srcdir}/${_srcname}/Documentation/devicetree/bindings/net/"
  cp -r "${srcdir}/ath/drivers/net/wireless/ath" "${srcdir}/${_srcname}/drivers/net/wireless/"

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  echo "Setting config..."
  cp ../config .config

  chmod +x "${srcdir}"/auto-cpu-optimization.sh
  "${srcdir}"/auto-cpu-optimization.sh

  scripts/config -e CACHY

  scripts/config -e SCHED_BORE

  scripts/config -e LTO_CLANG_THIN

  scripts/config -d HZ_300 \
            -e HZ_1000 \
            --set-val HZ "1000"

  scripts/config -d CPU_FREQ_DEFAULT_GOV_SCHEDUTIL \
            -e CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  scripts/config -d HZ_PERIODIC \
            -d NO_HZ_IDLE \
            -e NO_HZ_FULL \
            -e NO_HZ \
            -e NO_HZ_COMMON \
            -e CONTEXT_TRACKING

  scripts/config -e PREEMPT_DYNAMIC \
            -e PREEMPT \
            -d PREEMPT_VOLUNTARY \
            -d PREEMPT_LAZY \
            -d PREEMPT_NONE

  scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
            -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

  scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
            -e TRANSPARENT_HUGEPAGE_ALWAYS

  scripts/config -e USER_NS

  # Logs
  DEBUG_LOG="debug_kernel_cfg.log"

  # Helper functions
  disable_config_pattern() {
    local pattern="$1"
    
    echo "======================================" >> "$DEBUG_LOG"
    echo "Disabling pattern: $pattern" >> "$DEBUG_LOG"
    echo "======================================" >> "$DEBUG_LOG"
    
    grep -E "^CONFIG_$pattern=[ym]" .config | while IFS= read -r line; do
      key=$(echo "$line" | cut -d= -f1 | sed 's/^CONFIG_//')

      echo "-$key" >> "$DEBUG_LOG"
      scripts/config -d "$key"
    done
  }

  disable_config_awk() {
    local kconfig_file="$1"
    local awk_pattern="$2"
    local description="$3"
    
    if [ -z "$description" ]; then
      echo "Error: Description is required for disable_config_awk" >&2
      return 1
    fi
    
    echo "======================================" >> "$DEBUG_LOG"
    echo "Disabling: $description" >> "$DEBUG_LOG"
    echo "======================================" >> "$DEBUG_LOG"
    
    awk "$awk_pattern" "$kconfig_file" | while IFS= read -r line; do
      config=$(echo "$line" | cut -d= -f1 | sed 's/^config //')
      
      echo "-$config" >> "$DEBUG_LOG"
      scripts/config -d "$config"
    done
  }

  # TCP BBR
  disable_config_pattern "TCP_CONG_.*"
  disable_config_pattern "NET_SCH_.*"
  scripts/config -e TCP_CONG_ADVANCED \
            -e TCP_CONG_BBR \
            -e DEFAULT_BBR \
            -e NET_SCH_DEFAULT \
            -e NET_SCH_FQ \
            -e DEFAULT_FQ

  # Expert option
  scripts/config -e EXPERT \
            -e PROCESSOR_SELECT
  
  # Kernel Configuration
  ### Platform-specific, MUST EDIT
  disable_config_pattern ".*(HYGON|CENTAUR|ZHAOXIN|STATS|QUOTA|DEBUG((_)?FS|_CORE)?|DUMP|_DUMMY|TRACING|_(PCM)?TEST(ING)?|TABLET(S)?|TOUCHSCREEN)"
  disable_config_pattern "(KEXEC|FIREWIRE|TINYDRM|VMWARE|IWL[0-9]|IPW|XIL).*"
  disable_config_pattern ".*(VIA|NVIDIA|NFORCE|IBM|MLX|RAID|DEPRECATED|LEGACY|_(SIS|XIL|TI_)).*"
  disable_config_pattern ".*((AFFS|BCACHEFS|BEFS|BTRFS|ECRYPT|EROFS|F2FS|JFFS2|UBIFS|GFS2|HFSPLUS|HFS|JFS|MINIX|NILFS2|OCFS2|OMFS|ORANGEFS|ROMFS|UFS|ZISOFS|ZONEFS)_FS)|(CEPH|CRAMFS|ZISOFS).*"
  disable_config_pattern "(AIX|MAC|MINIX|SOLARIS_X86|LDM|KARMA)_(SUB)?PARTITION"
  disable_config_pattern "(ATA_(OVER_ETH|SFF)|BT_(HCIBTUSB_(BCM|MTK|RTL)|HCI(UART|BCM.*)|MTK.*))"
  disable_config_pattern "(BLK_DEV_(DRBD|FD|MD|NBD|NULL_BLK|RAM|RBD|UBLK|IO_TRACE)|DEBUG_(BOOT_PARAMS|WX|SHIRQ))"
  disable_config_pattern "DRM_(AMDGPU_(CIK|SI)|AST|GMA500|MGAG200|NOUVEAU|RADEON|VBOXVIDEO|VMWGFX)"
  disable_config_pattern "(INPUT_(JOY.*)|MEDIA_((ANALOG|DIGITAL)_TV|RADIO|TEST)_SUPPORT)"
  disable_config_pattern "(IRQSOFF|PREEMPT|SCHED|HWLAT|OSNOISE|TIMERLAT|ATH5K|STACK)_TRACER"
  disable_config_pattern "SECURITY_(SMACK|TOMOYO|LOADPIN|APPARMOR)"
  disable_config_pattern "(VIDEO_(USBTV|TVAUDIO|MGB4|SOLO6X10|EM28XX|TW.*)|VGA_(ARB|SWITCHEROO))"

  ### AC97
  disable_config_awk "sound/pci/Kconfig" '
    /^config / { config=$2; capture=0 }
    /select SND_AC97_CODEC/ { capture=1 }
    /^$/ { if (capture) print config; config=""; capture=0 }
    END { if (capture) print config }
  ' "AC97"

  scripts/config -d ACCESSIBILITY \
            -d AGP \
            -d ANDROID_BINDER_IPC \
            -d ATM \
            -d AUDIT \
            -d BSD_DISKLABEL \
            -d CAN \
            -d CHROME_PLATFORMS \
            -d CXL_BUS \
            -d FDDI \
            -d FPGA \
            -d FUNCTION_ERROR_INJECTION \
            -d GAMEPORT \
            -d GNSS \
            -d GOOGLE_FIRMWARE \
            -d HAMRADIO \
            -d HIBERNATION \
            -d HID_APPLE \
            -d HYPERV \
            -d INFINIBAND \
            -d IPACK_BUS \
            -d ISDN \
            -d KFENCE \
            -d MACINTOSH_DRIVERS \
            -d MCB \
            -d MELLANOX_PLATFORM \
            -d MEMTEST \
            -d MMIOTRACE \
            -d MWAVE \
            -d NETWORK_FILESYSTEMS \
            -d NFC \
            -d PARPORT \
            -d PCCARD \
            -d PHONET \
            -d PROC_KCORE \
            -d PROFILING \
            -d RC_CORE \
            -d RUNTIME_TESTING_MENU \
            -d SCSI_IPR_TRACE \
            -d SIOX \
            -d SLIMBUS \
            -d SND_SOC_AC97_CODEC \
            -d SURFACE_PLATFORMS \
            -d TRACER_SNAPSHOT \
            -d UPROBE_EVENTS \
            -d USB_GADGET \
            -d VBOXGUEST \
            -d VMXNET3 \
            -d WATCHDOG \
            -d XEN \
            -d ZSWAP

  ### Rewrite configuration
  echo "Rewriting configuration..."
  yes "" | make "${BUILD_FLAGS[@]}" prepare > debug_prepare.log 2>&1
  yes "" | make "${BUILD_FLAGS[@]}" config > debug_config.log 2>&1
  echo "Config rewritten"

  ### Prepared version
  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd "$_srcname"
  make "${BUILD_FLAGS[@]}" -j"$(nproc)" all
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=('coreutils' 'kmod' 'initramfs')
  optdepends=('wireless-regdb: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE KSMBD-MODULE UKSMD-BUILTIN NTSYNC-MODULE VHBA-MODULE ADIOS-MODULE)

  cd "$_srcname"

  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make "${BUILD_FLAGS[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
      DEPMOD=/doesnt/exist  modules_install  # Suppress depmod

  # remove build links
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=('pahole' "${pkgbase}")
  depends+=(clang llvm lld)

  cd "${_srcname}"
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  if [ -f tools/bpf/resolve_btfids/resolve_btfids ]; then
    install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids
  fi

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase")
pkgname+=("$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

b2sums=('SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP'
        'SKIP')
